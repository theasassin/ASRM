#load dada2
library (dada2)

#set working directory
setwd("/home/sassin/CCRM_PCOS_Phase_Repooled")

#set the correct path
path <- "/home/sassin/CCRM_PCOS_Phase_Repooled/CCRM"

#verify the correct path is set 
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq (Aagaard.91.30435.Oral-read_R1_val_1.fq.gz) and SAMPLENAME_R2_001.fastq (Aagaard.91.30435.Oral-read_R2_val_2.fq.gz) 
fnFs <- sort(list.files(path, pattern="validated_R1.001.fq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="validated_R2.001.fq.gz", full.names = TRUE))

# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

#Run the Plot Quality of the reverse reads for four samples
plotQualityProfile(fnRs[1:4])

#Run the Plot Quality of the forward reads for four samples 
plotQualityProfile(fnFs[1:4])

# Place filtered files in filtered subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

#Filter and Trim stage now. Will Filter forward reads at 240 and will filter reverse reads at 220
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,220),
                     maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
                     compress=TRUE, multithread=FALSE)
                     
#Of note, received this error message 
# The filter removed all reads: monkeyid_trimmed_files//filtered/multimatched.validated_F_filt.fastq.gz and monkeyid_trimmed_files//filtered/multimatched.validated_R_filt.fastq.gz not written.
# Some input samples had no reads pass the filter.
# Warning messages:
# 1: In file.remove(fout[[1]]) :
  cannot remove file 'monkeyid_trimmed_files//filtered/multimatched.validated_F_filt.fastq.gz', reason 'No such file or directory'
# 2: In file.remove(fout[[2]]) :
  cannot remove file 'monkeyid_trimmed_files//filtered/multimatched.validated_R_filt.fastq.gz', reason 'No such file or directory'

#Run the Plot Quality of the forward TruncLen Filtered samples for four samples 
plotQualityProfile(filtFs [1:4])

#Run the Plot Quality of the reverse TruncLen Filtered samples for four samples 
plotQualityProfile(filtRs [1:4])

#Learn the Error Rates Forward 
errF <- learnErrors(filtFs, multithread=TRUE)

#Learn the Error Rates Reverse 
errR <- learnErrors(filtRs, multithread=TRUE)

#Check the estimated error rates in the forward reads 
plotErrors(errF, nominalQ=TRUE)

#check the estimated error rates in the reverse reads 
plotErrors(errR, nominalQ=TRUE)

#get a list of the files that still exist after filtering 
exists <- file.exists(filtFs)

#Dereplicate the existing files in forward
derepFs <- derepFastq(filtFs[exists], verbose=TRUE)

#Dereplicating the existing files in reverse
derepRs <- derepFastq(filtRs[exists], verbose=TRUE)

# Name the derep-class objects by the sample names
names(derepFs) <- sample.names[exists]
names(derepRs) <- sample.names[exists]

# This time I am going to try with true pooling 
dadaFs <- dada(derepFs, err=errF, pool=TRUE, multithread=48)
dadaRs <- dada(derepRs, err=errR, pool=TRUE, multithread=48)

#Sample Inference of the derep forward samples pseudo pooling  
dadaFs <- dada(derepFs, err=errF, pool="pseudo", multithread=48)

#sample inference of the derep reverse samples pseudo pooling
dadaRs <- dada(derepRs, err=errR, pool="pseudo", multithread=48)

#inspecting the dada-class object
dadaFs[[1]]

#dada-class: object describing DADA2 denoising results
#with pool + true 674 sequence variants were inferred from 3181 input unique sequences.
#Key parameters: OMEGA_A = 1e-40, OMEGA_C = 1e-40, BAND_SIZE = 16
# with pseudo pool 244 sequence variants were inferred from 3181 input unique sequences.
# Key parameters: OMEGA_A = 1e-40, OMEGA_C = 1e-40, BAND_SIZE = 16

#Merge paired reads 
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)

# Inspect the merger data.frame from the first sample
head(mergers[[1]])# Inspect the merger data.frame from the first sample
head(mergers[[1]])

#construct an ASV sequence table 
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
#[1]   503 13994 with pool 
# [1]  503 9580 with pseudopool 

# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
# results below 
#240  248  249  251  252  253  254  255  313  314  335  336  388  413  416  417 
  #4    1    3    8 1930 7339  202    4    2    1    2    1    3    1    2    1 
# can remove non target length sequences with seqtab2 <- seqtab[,nchar(colnames(seqtab)) %in% 250:256]).

# Remove chimeras
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)

#pseudo [1]  503 4868
#pool 503 4616

# Determine the frequency of chimeras 
sum(seqtab.nochim)/sum(seqtab)
# 0.8940161, so they count for about about 11% of merged sequence reads 

# Track reads through the pipeline and make sure they made it thru the pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))

#Warning message:
#In cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers,  :
#number of rows of result is not a multiple of vector length (arg 2)

# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names

#take a look at the data 
head(track)

#make a table in TSV form
write.table(track, "Renamed-cohortsonly-data-read-count-tracking.tsv", quote=FALSE, sep="\t", col.names=NA)

#### continuing via the DADA2 Tutorial pipeline ---> skip to astrobiomike portion if you want to use decipher  
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)

#error message 
# Warning messages:
#1: In UseMethod("depth") :
 # no applicable method for 'depth' applied to an object of class "NULL"
#2: In UseMethod("depth") :
 # no applicable method for 'depth' applied to an object of class "NULL"
#3: In UseMethod("depth") :
 # no applicable method for 'depth' applied to an object of class "NULL"

#Inspecting the taxonomic assignments 
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)

library(phyloseq)

library(Biostrings)

library(ggplot2)

theme_set(theme_bw())

#continuing along DADA 2 pipeline tutorial, now we construct a simple data.frame and run phyloseq 

samples.out <- rownames(seqtab.nochim)

#Names of subjects 
subject.numbers <- sapply(strsplit(samples.out, "[.]"), `[`, 2)

#Names of monkeys
monkey.numbers <- sapply(strsplit(samples.out, "[.]"), `[`, 3)

#Names of Cohorts
cohort.numbers <- sapply(strsplit(samples.out, "[.]"), `[`, 4)

#Names of diet treatment 
diet.treatment <- sapply(strsplit(samples.out,"[.]"), `[`, 5)

#Names of hormone treatment 
hormone.treatment <- sapply(strsplit(samples.out,"[.]"), `[`, 6)

#Names of body sites 
body.site <- sapply(strsplit(samples.out,"[.]"), `[`, 7)

#Names of cycle phase 
cycle.phase <- sapply(strsplit(samples.out,"[.]"), `[`, 8)

#Make our data frame 
samdf <- data.frame(Subject=subject.numbers, MonkeyID=monkey.numbers, Cohort=cohort.numbers, Diet=diet.treatment, Hormone=hormone.treatment, Site=body.site, Phase=cycle.phase)
rownames(samdf) <- samples.out

#Construct our Phyloseq object 
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), 
               sample_data(samdf), 
               tax_table(taxa))

# Store DNA sequences of our ASVs in the refseq spot 
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps

#Visualize alpha diversity 
plot_richness(ps, x="Site", measures=c("Shannon", "Simpson"), color="Cohort")


# Transform data to proportions as appropriate for Bray-Curtis distances
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")

plot_ordination(ps.prop, ord.nmds.bray, color="Site", title="Bray NMDS")
plot_ordination(ps.prop, ord.nmds.bray, color="Cohort", title="Bray NMDS")

#Now to make a Bar Plot of top 20 
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Cohort", fill="Family") + facet_wrap(~Site, scales="free_x")

#Bar Plot of top 10 
top10 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.top10 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top10 <- prune_taxa(top10, ps.top10)
plot_bar(ps.top10, x="Cohort", fill="Family") + facet_wrap(~Site, scales="free_x")


#to make a very busy relative abundance chart 
plot_bar(ps.top20, fill="Phylum") + geom_bar(aes(color = Phylum, fill = Phylum), stat="identity", position="stack") + labs(x = "Cohort", y = "Relative Abundance\n") + theme(panel.background = element_blank())


#### here starts the astrobiomike way of processing the data via DECIPHER 

## downloading DECIPHER-formatted SILVA v138 reference
download.file(url="http://www2.decipher.codes/Classification/TrainingSets/SILVA_SSU_r138_2019.RData", destfile="SILVA_SSU_r138.RData")

## loading reference taxonomy object
load(SILVA_SSU_r138_2019.RData)

## loading DECIPHER
library(DECIPHER)

library(dada2)

## creating DNAStringSet object of our ASVs
dna <- DNAStringSet(getSequences(seqtab.nochim))

#and classifying
tax_info <- IdTaxa(test=dna, trainingSet=trainingSet, strand="both", processors=NULL) 

# giving our seq headers more manageable names (ASV_1, ASV_2...)
asv_seqs <- colnames(seqtab.nochim)
asv_headers <- vector(dim(seqtab.nochim)[2], mode="character")

for (i in 1:dim(seqtab.nochim)[2]) {
  asv_headers[i] <- paste(">ASV", i, sep="_")
}

# making and writing out a fasta of our final ASV seqs:
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, "ASVs.fa")

# count table:
asv_tab <- t(seqtab.nochim)
row.names(asv_tab) <- sub(">", "", asv_headers)
write.table(asv_tab, "ASVs_counts.tsv", sep="\t", quote=F, col.names=NA)

# tax table:
# creating table of taxonomy and setting any that are unclassified as "NA"
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species")
asv_tax <- t(sapply(tax_info, function(x) {
  m <- match(ranks, x$rank)
  taxa <- x$taxon[m]
  taxa[startsWith(taxa, "unclassified_")] <- NA
  taxa
}))
colnames(asv_tax) <- ranks
rownames(asv_tax) <- gsub(pattern=">", replacement="", x=asv_headers)

write.table(asv_tax, "ASVs_taxonomy.tsv", sep = "\t", quote=F, col.names=NA)

#Decontam 
> vector_for_decontam <- c(rep(FALSE, 392), rep(TRUE, 8), rep(FALSE, 103))
> contam_df <- isContaminant(t(asv_tab), neg=vector_for_decontam)
> table(contam_df$contaminant)

#FALSE  TRUE 
# 4572    44 

contam_asvs <- row.names(contam_df[contam_df$contaminant == TRUE, ])
contam_asvs <- row.names(contam_df[contam_df$contaminant == TRUE, ])
asv_tax[row.names(asv_tax) %in% contam_asvs, ]

#        domain     phylum             class                 order                                 family                 genus                     
ASV_8    "Bacteria" "Firmicutes"       "Clostridia"          "Lachnospirales"                      "Lachnospiraceae"      NA                        
ASV_12   "Bacteria" NA                 NA                    NA                                    NA                     NA                        
ASV_70   "Bacteria" "Firmicutes"       "Bacilli"             "Lactobacillales"                     "Streptococcaceae"     NA                        
ASV_75   "Bacteria" "Firmicutes"       "Bacilli"             "Staphylococcales"                    "Staphylococcaceae"    "Staphylococcus"          
ASV_758  "Bacteria" "Fusobacteriota"   "Fusobacteriia"       "Fusobacteriales"                     "Fusobacteriaceae"     "Fusobacterium"           
ASV_916  "Bacteria" "Firmicutes"       "Bacilli"             "Bacillales"                          "Bacillaceae"          NA                        
ASV_1188 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Actinomycetales"                     "Actinomycetaceae"     "Actinomyces"             
ASV_1241 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Micrococcales"                       "Micrococcaceae"       "Rothia"                  
ASV_1291 "Bacteria" "Cyanobacteria"    "Cyanobacteriia"      "Chloroplast"                         NA                     NA                        
ASV_1429 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" "Burkholderiales"                     "Comamonadaceae"       NA                        
ASV_1562 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Corynebacteriales"                   "Corynebacteriaceae"   "Corynebacterium"         
ASV_1903 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Bifidobacteriales"                   "Bifidobacteriaceae"   "Bifidobacterium"         
ASV_2176 "Bacteria" "Bacteroidota"     "Bacteroidia"         "Bacteroidales"                       "Bacteroidaceae"       "Bacteroides"             
ASV_2487 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" "Pasteurellales"                      "Pasteurellaceae"      NA                        
ASV_2664 "Bacteria" "Firmicutes"       "Bacilli"             "Staphylococcales"                    "Staphylococcaceae"    "Staphylococcus"          
ASV_2714 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" "Pseudomonadales"                     "Moraxellaceae"        "Acinetobacter"           
ASV_2724 "Bacteria" "Firmicutes"       "Bacilli"             "Lactobacillales"                     "Streptococcaceae"     "Streptococcus"           
ASV_3064 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" NA                                    NA                     NA                        
ASV_3108 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" "Pseudomonadales"                     "Pseudomonadaceae"     "Pseudomonas"             
ASV_3142 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" "Burkholderiales"                     "Neisseriaceae"        NA                        
ASV_3310 "Bacteria" "Firmicutes"       "Bacilli"             "Lactobacillales"                     "Lactobacillaceae"     "Lactobacillus"           
ASV_3321 "Bacteria" "Campilobacterota" "Campylobacteria"     "Campylobacterales"                   "Campylobacteraceae"   "Campylobacter"           
ASV_3459 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Corynebacteriales"                   "Corynebacteriaceae"   "Lawsonella"              
ASV_3510 "Bacteria" "Proteobacteria"   "Alphaproteobacteria" "Rhizobiales"                         "Xanthobacteraceae"    NA                        
ASV_3511 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Micrococcales"                       "Intrasporangiaceae"   NA                        
ASV_3540 "Bacteria" "Proteobacteria"   "Alphaproteobacteria" "Caulobacterales"                     "Caulobacteraceae"     "Brevundimonas"           
ASV_3666 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Corynebacteriales"                   "Corynebacteriaceae"   "Turicella"               
ASV_3748 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" "Burkholderiales"                     "Comamonadaceae"       NA                        
ASV_3804 "Bacteria" "Fusobacteriota"   "Fusobacteriia"       "Fusobacteriales"                     "Leptotrichiaceae"     "Leptotrichia"            
ASV_3847 "Bacteria" "Bacteroidota"     "Bacteroidia"         "Bacteroidales"                       "Rikenellaceae"        "Alistipes"               
ASV_3861 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Corynebacteriales"                   "Mycobacteriaceae"     "Mycobacterium"           
ASV_3917 "Bacteria" "Proteobacteria"   "Gammaproteobacteria" NA                                    NA                     NA                        
ASV_4106 "Bacteria" NA                 NA                    NA                                    NA                     NA                        
ASV_4133 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Bifidobacteriales"                   "Bifidobacteriaceae"   "Scardovia"               
ASV_4219 "Bacteria" "Proteobacteria"   "Alphaproteobacteria" "Rhizobiales"                         "Xanthobacteraceae"    "Pseudolabrys"            
ASV_4225 "Bacteria" "Cyanobacteria"    "Vampirivibrionia"    "Obscuribacterales"                   "Obscuribacteraceae"   "Candidatus Obscuribacter"
ASV_4273 "Bacteria" "Proteobacteria"   "Alphaproteobacteria" "Sphingomonadales"                    "Sphingomonadaceae"    NA                        
ASV_4279 "Bacteria" "Bdellovibrionota" "Oligoflexia"         "0319-6G20"                           NA                     NA                        
ASV_4310 "Bacteria" "Actinobacteriota" "Thermoleophilia"     "Solirubrobacterales"                 "Solirubrobacteraceae" "Solirubrobacter"         
ASV_4311 "Bacteria" "Proteobacteria"   "Alphaproteobacteria" "Sphingomonadales"                    "Sphingomonadaceae"    "Altererythrobacter"      
ASV_4314 "Bacteria" "Firmicutes"       "Clostridia"          "Peptostreptococcales-Tissierellales" NA                     "Anaerococcus"            
ASV_4352 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Micrococcales"                       "Cellulomonadaceae"    "Cellulomonas"            
ASV_4432 "Bacteria" "Proteobacteria"   "Alphaproteobacteria" "Sphingomonadales"                    "Sphingomonadaceae"    NA                        
ASV_4462 "Bacteria" "Actinobacteriota" "Actinobacteria"      "Propionibacteriales"                 "Propionibacteriaceae" "Cutibacterium"           
         species
ASV_8    NA     
ASV_12   NA     
ASV_70   NA     
ASV_75   NA     
ASV_758  NA     
ASV_916  NA     
ASV_1188 NA     
ASV_1241 NA     
ASV_1291 NA     
ASV_1429 NA     
ASV_1562 NA     
ASV_1903 NA     
ASV_2176 NA     
ASV_2487 NA     
ASV_2664 NA     
ASV_2714 NA     
ASV_2724 NA     
ASV_3064 NA     
ASV_3108 NA     
ASV_3142 NA     
ASV_3310 NA     
ASV_3321 NA     
ASV_3459 NA     
ASV_3510 NA     
ASV_3511 NA     
ASV_3540 NA     
ASV_3666 NA     
ASV_3748 NA     
ASV_3804 NA     
ASV_3847 NA     
ASV_3861 NA     
ASV_3917 NA     
ASV_4106 NA     
ASV_4133 NA     
ASV_4219 NA     
ASV_4225 NA     
ASV_4273 NA     
ASV_4279 NA     
ASV_4310 NA     
ASV_4311 NA     
ASV_4314 NA     
ASV_4352 NA     
ASV_4432 NA     
ASV_4462 NA   

contam_indices <- which(asv_fasta %in% paste0(">", contam_asvs))
dont_want <- sort(c(contam_indices, contam_indices + 1))
asv_fasta_no_contam <- asv_fasta[- dont_want]
asv_tab_no_contam <- asv_tab[!row.names(asv_tab) %in% contam_asvs, ]
asv_tax_no_contam <- asv_tax[!row.names(asv_tax) %in% contam_asvs, ]
write(asv_fasta_no_contam, "ASVs-no-contam.fa")
write.table(asv_tab_no_contam, "ASVs_counts-no-contam.tsv",
+             sep="\t", quote=F, col.names=NA)
write.table(asv_tax_no_contam, "ASVs_taxonomy-no-contam.tsv",
+             sep="\t", quote=F, col.names=NA)

#make count tab and tax tables from decontaminated 
> library (tidyverse)
> library (phyloseq)
> library (vegan)
> libary (DESeq2)
> library (dendextend)
> library (viridis)

write(asv_fasta_no_contam, "ASVs-no-contam.fa")

Write out to files 
write.table(asv_tab_no_contam, "ASVs_counts-no-contam.tsv", sep = "\t", quote = F, col.names = NA)
write.table(asv_tax_no_contam, "ASVs_taxonomy-no-contam.tsv", sep = "\t", quote = F, col.names = NA)

# this removes all your lists in your environment # rm(list=ls()) # 

count_tab <- read.table("ASVs_counts-no-contam.tsv", header=T, row.names=1,
+                         check.names=F, sep="\t")[ , -c(393:400)] #this removes the kits in samples 393-400 

tax_tab <- as.matrix(read.table("ASVs_taxonomy-no-contam.tsv", header=T,
           row.names=1, check.names=F, sep="\t"))

# Create a sample info tab using a TSV file of the samples and variables 
sample_info_tab <- read.table("spacingpooled495tsv.tsv", header = T, row.names = 1, check.names = F, sep = "\t")
#used this one because sample name is entire sample name so it matches later on when making Phyloseq. Also need a header at the top. 

#add color to cohort 
sample_info_tab$Cohort <- as.character(sample_info_tab$Cohort)

deseq_counts <- DESeqDataSetFromMatrix(count_tab, colData = sample_info_tab, design = ~Phase)

deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
# NOTE: If you get this error here with your dataset: "Error in
# estimateSizeFactorsForMatrix(counts(object), locfunc =locfunc, : every
# gene contains at least one zero, cannot compute log geometric means", that
# can be because the count table is sparse with many zeroes, which is common
# with marker-gene surveys. In that case you'd need to use a specific
# function first that is equipped to deal with that. 

# Given error message, ran the following as suggested 
deseq_counts <- estimateSizeFactors(deseq_counts, type = "poscounts")
# now followed by the transformation function:
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)

# and here is pulling out our transformed table
vst_trans_count_tab <- assay(deseq_counts_vst)

# and calculating our Euclidean distance matrix
euc_dist <- dist(t(vst_trans_count_tab))

# to make hierarchy cluster 
euc_clust <- hclust(euc_dist, method="ward.D2")
plot(euc_clust) 
euc_dend <- as.dendrogram(euc_clust, hang=0.1)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols
plot(euc_dend, ylab="VST Euc. dist.")

# To make phyloseq object with transformed table 
vst_count_phy <- otu_table(vst_trans_count_tab, taxa_are_rows=T)
sample_info_tab_phy <- sample_data(sample_info_tab)
vst_physeq <- phyloseq(vst_count_phy, sample_info_tab_phy)

#make a PCOA plot
vst_pcoa <- ordinate(vst_physeq, method="MDS", distance="euclidean")
eigen_vals <- vst_pcoa$values$Eigenvalues

euc_clust <- hclust(euc_dist, method="ward.D2")

  # hclust objects like this can be plotted with the generic plot() function
plot(euc_clust) 
    # but i like to change them to dendrograms for two reasons:
      # 1) it's easier to color the dendrogram plot by groups
      # 2) if wanted you can rotate clusters with the rotate() 
      #    function of the dendextend package

euc_dend <- as.dendrogram(euc_clust, hang=0.1)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols

plot(euc_dend, ylab="VST Euc. dist.")

# again i realized samples were getting dropped 

deseq_counts_new <- DESeqDataSetFromMatrix(count_tab, colData = sample_info_tab_new, design = ~Phase ) 

deseq_counts_vst_new <- varianceStabilizingTransformation(deseq_counts_new)
# NOTE: If you get this error here with your dataset: "Error in
# estimateSizeFactorsForMatrix(counts(object), locfunc =locfunc, : every
# gene contains at least one zero, cannot compute log geometric means", that
# can be because the count table is sparse with many zeroes, which is common
# with marker-gene surveys. In that case you'd need to use a specific
# function first that is equipped to deal with that. 

# Given error message, ran the following as suggested 
deseq_counts_new <- estimateSizeFactors(deseq_counts_new, type = "poscounts")
# now followed by the transformation function:
deseq_counts_vst_new <- varianceStabilizingTransformation(deseq_counts_new)

# and here is pulling out our transformed table
vst_trans_count_tab_new <- assay(deseq_counts_vst_new)

# and calculating our Euclidean distance matrix
euc_dist_new <- dist(t(vst_trans_count_tab_new))

# to make hierarchy cluster 
euc_clust <- hclust(euc_dist, method="ward.D2")
plot(euc_clust) 
euc_dend <- as.dendrogram(euc_clust, hang=0.1)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols
plot(euc_dend, ylab="VST Euc. dist.")

# To make phyloseq object with transformed table 
vst_count_phy_new <- otu_table(vst_trans_count_tab_new, taxa_are_rows=T)
sample_info_tab_phy_new <- sample_data(sample_info_tab_new)
vst_physeq_new <- phyloseq(vst_count_phy_new, sample_info_tab_phy_new)

# i need to make sure they are no longer getting dropped 
intersect(sample_names(sample_info_tab_phy_new), sample_names(vst_count_phy_new))
# this shows all samples intercept 

#make a PCOA plot
vst_pcoa_new <- ordinate(vst_physeq_new, method="MDS", distance="euclidean")
eigen_vals_new <- vst_pcoa_new$values$Eigenvalues

plot_ordination(vst_physeq_new, vst_pcoa_new, color="Cohort") + 
  geom_point(size=1) + labs(col="Cohort") + 
  # geom_text(aes(label=sample_info_tab$Site, hjust=0.3, vjust=-0.4))  + 
  coord_fixed(sqrt(eigen_vals_new[2]/eigen_vals_new[1])) + ggtitle("PCoA") + 
  scale_color_brewer(palette = "Set1") +
  facet_grid(Site~Phase)
#theme_bw() + theme(legend.position="none")


# setting up helpful variables 
# cohort variables 
Cohort1_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Cohort == "Cohort1"]
Cohort2_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Cohort == "Cohort2"]
Cohort3_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Cohort == "Cohort3"]
Cohort4_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Cohort == "Cohort4"]

# body site variables 
Oral_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Site == "oral"]
Vagina_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Site == "vagina"]
Cervix_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Site == "cervix"]
Anus_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Site == "anus"]
Rectal_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Site == "rectal"]

# trying anova on all samples by cohort 
anova(betadisper(euc_dist_new, sample_info_tab_new$Cohort))

# Betadisper Analysis of Variance Table

#Response: Distances
#Df  Sum Sq Mean Sq F value Pr(>F)
#Groups      3    7772  2590.8   1.182  0.316
#Residuals 491 1076156  2191.8               

adonis(euc_dist_new~sample_info_tab_new$Cohort)


#Number of permutations: 999
#Terms added sequentially (first to last)
#Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)   
# sample_info_tab$Cohort   3     68328   22776  1.8591 0.01123  0.011 **
# Residuals              491   6015254   12251         0.98877          
# Total                  494   6083582                 1.00000  

# ANOVA on all samples by site 
anova(betadisper(euc_dist_new, sample_info_tab_new$Site))
#Analysis of Variance Table
#Response: Distances
#Df Sum Sq Mean Sq F value    Pr(>F)    
#Groups      4 326599   81650   132.3 < 2.2e-16 ***
#Residuals 490 302409     617 

adonis(euc_dist_new~sample_info_tab_new$Site)
#Number of permutations: 999
#Terms added sequentially (first to last)

# Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    
# sample_info_tab$Site   4   2151937  537984  67.049 0.35373  0.001 ***
# Residuals            490   3931645    8024         0.64627           
# Total                494   6083582                 1.00000  

# ANOVA on all samples by phase 
anova(betadisper(euc_dist_new, sample_info_tab_new$Phase))
#Analysis of Variance Table
#Response: Distances
#Df Sum Sq Mean Sq F value    Pr(>F)    
# Groups      5 373466   74693  51.121 < 2.2e-16 ***
# Residuals 489 714477    1461  

adonis(euc_dist_new~sample_info_tab_new$Phase)
#Number of permutations: 999

#Terms added sequentially (first to last)

# Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    
# sample_info_tab$Phase   5    912687  182537  17.262 0.15002  0.001 ***
# Residuals             489   5170895   10574         0.84998           
# Total                 494   6083582                 1.00000 

# Diet
anova(betadisper(euc_dist_new, sample_info_tab_new$Diet))
#Response: Distances
#Df  Sum Sq Mean Sq F value  Pr(>F)  
#Groups      1    7228  7228.3  3.3218 0.06897 .
# Residuals 493 1072779  2176.0  

adonis(euc_dist_new~sample_info_tab_new$Diet)
#Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)   
# sample_info_tab$Diet   1     45363   45363  3.7037 0.00746  0.004 **
# Residuals            493   6038220   12248         0.99254          
# Total                494   6083582                 1.00000  

# Hormone 
anova(betadisper(euc_dist_new, sample_info_tab_new$Hormone))

# Response: Distances
# Df  Sum Sq Mean Sq F value Pr(>F)
# Groups      1     149  149.28  0.0672 0.7956
# Residuals 493 1095599 2222.31 

adonis(euc_dist_new~sample_info_tab_new$Hormone)
#                           Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)
# sample_info_tab$Hormone   1     12440   12440  1.0102 0.00204  0.343
# Residuals               493   6071142   12315         0.99796       
# Total                   494   6083582                 1.00000 

# Making a PCOA of CERVIX ONLY 

# new distance matrix of only Cervical samples 
Cervix_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% Cervix_sample_IDs]))

# and now making a sample info table with just the cervical samples
Cervix_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% Cervix_sample_IDs,]

anova(betadisper(Cervix_euc_dist_new, Cervix_sample_info_tab_new$Cohort))
adonis(Cervix_euc_dist_new~Cervix_sample_info_tab_new$Cohort)

# Betadisper
# Analysis of Variance Table

# Response: Distances
#Df Sum Sq Mean Sq F value   Pr(>F)   
#Groups      3   9336 3112.00  4.0047 0.008613 **
#Residuals 183 142208  777.09                    
#---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

#Call:
# adonis(formula = Cervix_euc_dist ~ Cervix_sample_info_tab$Cohort) 

# Permutation: free
# Number of permutations: 999

#Terms added sequentially (first to last)

#Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    
#Cervix_sample_info_tab$Cohort   3     27954  9318.1  1.8053 0.02874  0.002 ***
#Residuals                     183    944555  5161.5         0.97126           
#Total                         186    972509                 1.00000           
---
  #Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
  
  
  # making our phyloseq object with transformed table
cervix_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% Cervix_sample_IDs], taxa_are_rows=T)
cervix_sample_info_tab_phy_new <- sample_data(Cervix_sample_info_tab_new)
cervix_vst_physeq_new <- phyloseq(cervix_vst_count_phy_new, cervix_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
cervix_vst_pcoa_new <- ordinate(cervix_vst_physeq_new, method="MDS", distance="euclidean")
cervix_eigen_vals_new <- cervix_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination of just Cervix  with our adonis statistic
plot_ordination(cervix_vst_physeq_new, cervix_vst_pcoa_new, color="Cohort", shape="Phase") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="Permutational ANOVA= 0.002") + 
  coord_fixed(sqrt(cervix_eigen_vals_new[2]/cervix_eigen_vals_new[1])) + ggtitle("PCoA - Cervix only") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# NOW MAKING PCOA OF VAGINAL ONLY SAMPLES 

# new distance matrix of only Vaginal samples 
Vagina_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% Vagina_sample_IDs]))

# and now making a sample info table with just the VAGINAL samples
Vagina_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% Vagina_sample_IDs, ]

anova(betadisper(Vagina_euc_dist_new, Vagina_sample_info_tab_new$Cohort))
adonis(Vagina_euc_dist_new~Vagina_sample_info_tab_new$Cohort)

#Analysis of Variance Table with Beta Disper 
# Response: Distances
# Df Sum Sq Mean Sq F value Pr(>F)
# Groups     3   3280 1093.18  1.4783 0.2265
# Residuals 82  60638  739.48               

# adonis(Vagina_euc_dist~Vagina_sample_info_tab$Cohort)
# Permutation: free
# Number of permutations: 999
# Terms added sequentially (first to last)

# Df SumsOfSqs MeanSqs F.Model     R2 Pr(>F)   
# Vagina_sample_info_tab$Cohort  3     31424 10474.8  1.5054 0.0522  0.01 **
# Residuals                     82    570563  6958.1         0.9478          
# Total                         85    601987                 1.0000          
#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

# making our phyloseq object with transformed table
vagina_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% Vagina_sample_IDs], taxa_are_rows=T)
vagina_sample_info_tab_phy_new <- sample_data(Vagina_sample_info_tab_new)
vagina_vst_physeq_new <- phyloseq(vagina_vst_count_phy_new, vagina_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
vagina_vst_pcoa_new <- ordinate(vagina_vst_physeq_new, method="MDS", distance="euclidean")
vagina_eigen_vals_new <- vagina_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination of just Vagina with our adonis statistic
plot_ordination(vagina_vst_physeq_new, vagina_vst_pcoa_new, color="Cohort", shape="Phase") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="Permutational ANOVA= 0.01") + 
  coord_fixed(sqrt(vagina_eigen_vals_new[2]/vagina_eigen_vals_new[1])) + ggtitle("PCoA - Vagina only") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")
+
  # NOW MAKING A PCOA OF ANUS SAMPLES 
  
  Anus_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% Anus_sample_IDs]))
Anus_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% Anus_sample_IDs, ]

anova(betadisper(Anus_euc_dist_new, Anus_sample_info_tab_new$Cohort))
adonis(Anus_euc_dist_new~Anus_sample_info_tab_new$Cohort)
# Betadisper Analysis of Variance Table
#Response: Distances
# Df Sum Sq Mean Sq F value    Pr(>F)    
# Groups     3 4850.9 1616.96   10.83 7.101e-06 ***
# Residuals 66 9854.2  149.31                      
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# adonis(Anus_euc_dist~Anus_sample_info_tab$Cohort)
# Permutation: free
# Number of permutations: 999
# Terms added sequentially (first to last)
#Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    
# Anus_sample_info_tab$Cohort  3    167307   55769  3.6159 0.14116  0.001 ***
# Residuals                   66   1017932   15423         0.85884           
# Total                       69   1185239                 1.00000           
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


# making our phyloseq object with transformed table
anus_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% Anus_sample_IDs], taxa_are_rows=T)
anus_sample_info_tab_phy_new <- sample_data(Anus_sample_info_tab_new)
anus_vst_physeq_new <- phyloseq(anus_vst_count_phy_new, anus_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
anus_vst_pcoa_new <- ordinate(anus_vst_physeq_new, method="MDS", distance="euclidean")
anus_eigen_vals_new <- anus_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination of just Vagina with our adonis statistic
plot_ordination(anus_vst_physeq_new, anus_vst_pcoa_new, color="Cohort", shape = "Diet") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="Permutational ANOVA= 0.001") + 
  coord_fixed(sqrt(anus_eigen_vals_new[2]/anus_eigen_vals_new[1])) + ggtitle("PCoA - Anus only") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# NOW MAKING PCOA OF ORAL SAMPLES 

Oral_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% Oral_sample_IDs]))

# and now making a sample info table with just the oral samples
Oral_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% Oral_sample_IDs, ]

anova(betadisper(Oral_euc_dist_new, Oral_sample_info_tab_new$Cohort))
adonis(Oral_euc_dist_new~Oral_sample_info_tab_new$Cohort)

#Analysis of Variance Table

# Beta disperser Response: Distances
# Df Sum Sq Mean Sq F value Pr(>F)
# Groups      3   1586  528.55  0.7443  0.528
# Residuals 108  76693  710.12               
# adonis(Oral_euc_dist~Oral_sample_info_tab$Cohort)

# Call:
#donis(formula = Oral_euc_dist ~ Oral_sample_info_tab$Cohort) 

#Permutation: free
#Number of permutations: 999

#Terms added sequentially (first to last)

# Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)
# Oral_sample_info_tab$Cohort   3     16011  5337.0  1.1447 0.03082  0.133
# Residuals                   108    503520  4662.2         0.96918       
# Total                       111    519531                 1.00000  

# making our phyloseq object with transformed table
oral_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% Oral_sample_IDs], taxa_are_rows=T)
oral_sample_info_tab_phy_new <- sample_data(Oral_sample_info_tab_new)
oral_vst_physeq_new <- phyloseq(oral_vst_count_phy_new, oral_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
oral_vst_pcoa_new <- ordinate(oral_vst_physeq_new, method="MDS", distance="euclidean")
oral_eigen_vals_new <- oral_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination of just Vagina with our adonis statistic
plot_ordination(oral_vst_physeq_new, oral_vst_pcoa_new, color="Cohort", shape ="Diet") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="Permutational ANOVA= 0.133") + 
  coord_fixed(sqrt(oral_eigen_vals_new[2]/oral_eigen_vals_new[1])) + ggtitle("PCoA - Oral only") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# NOW MAKING PCOA OF Rectal SAMPLES 

Rectal_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% Rectal_sample_IDs]))

# and now making a sample info table with just the oral samples
Rectal_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% Rectal_sample_IDs, ]

anova(betadisper(Rectal_euc_dist_new, Rectal_sample_info_tab_new$Cohort))
adonis(Rectal_euc_dist_new~Rectal_sample_info_tab_new$Cohort)


# Analysis of Variance Table

# Betadisper Response: Distances
# Df  Sum Sq Mean Sq F value Pr(>F)
# Groups     3  102.68  34.228  0.7204 0.5464
# Residuals 36 1710.46  47.513               
# adonis(Rectal_euc_dist~Rectal_sample_info_tab$Cohort)

# Number of permutations: 999

# Terms added sequentially (first to last)

# Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)  
# Rectal_sample_info_tab$Cohort  3     56721   18907  1.1427 0.08695  0.071 .
# Residuals                     36    595657   16546         0.91305         
# Total                         39    652379                 1.00000         
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


# making our phyloseq object with transformed table
rectal_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% Rectal_sample_IDs], taxa_are_rows=T)
rectal_sample_info_tab_phy_new <- sample_data(Rectal_sample_info_tab_new)
rectal_vst_physeq_new <- phyloseq(rectal_vst_count_phy_new, rectal_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
rectal_vst_pcoa_new <- ordinate(rectal_vst_physeq_new, method="MDS", distance="euclidean")
rectal_eigen_vals_new <- rectal_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination of just Vagina with our adonis statistic
plot_ordination(rectal_vst_physeq_new, rectal_vst_pcoa_new, color="Cohort", shape ="Diet") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="Permutational ANOVA= 0.071") + 
  coord_fixed(sqrt(rectal_eigen_vals_new[2]/rectal_eigen_vals_new[1])) + ggtitle("PCoA - Rectal only") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# Now Doing the same for phase data 

# cohort variables 
luteal_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Phase == "luteal"]
follicular_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Phase == "follicular"]
menses_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Phase == "menses"]
cesarean_sample_IDs <- row.names(sample_info_tab_new)[sample_info_tab_new$Phase == "cesarean"]

# Luteal 
luteal_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% luteal_sample_IDs]))

# and now making a sample info table 
luteal_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% luteal_sample_IDs, ]

anova(betadisper(luteal_euc_dist_new, luteal_sample_info_tab_new$Cohort))
adonis(luteal_euc_dist_new~luteal_sample_info_tab_new$Cohort)


# making our phyloseq object with transformed table
luteal_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% luteal_sample_IDs], taxa_are_rows=T)
luteal_sample_info_tab_phy_new <- sample_data(luteal_sample_info_tab_new)
luteal_vst_physeq_new <- phyloseq(luteal_vst_count_phy_new, luteal_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
luteal_vst_pcoa_new <- ordinate(luteal_vst_physeq_new, method="MDS", distance="euclidean")
luteal_eigen_vals_new <- luteal_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination of just Vagina with our adonis statistic
plot_ordination(luteal_vst_physeq_new, luteal_vst_pcoa_new, color="Cohort", shape="Site") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="PERMANOVA= 0.026") + 
  coord_fixed(sqrt(luteal_eigen_vals_new[2]/luteal_eigen_vals_new[1])) + ggtitle("PCoA - Luteal") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# Follicular
follicular_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% follicular_sample_IDs]))

# and now making a sample info table 
follicular_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% follicular_sample_IDs, ]

anova(betadisper(follicular_euc_dist_new, follicular_sample_info_tab_new$Cohort))
adonis(follicular_euc_dist_new~follicular_sample_info_tab_new$Cohort)


# making our phyloseq object with transformed table
follicular_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% follicular_sample_IDs], taxa_are_rows=T)
follicular_sample_info_tab_phy_new <- sample_data(follicular_sample_info_tab_new)
follicular_vst_physeq_new <- phyloseq(follicular_vst_count_phy_new, follicular_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
follicular_vst_pcoa_new <- ordinate(follicular_vst_physeq_new, method="MDS", distance="euclidean")
follicular_eigen_vals_new <- follicular_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination with our adonis statistic
plot_ordination(follicular_vst_physeq_new, follicular_vst_pcoa_new, color="Cohort", shape="Site") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="PERMANOVA= 0.063") + 
  coord_fixed(sqrt(follicular_eigen_vals_new[2]/follicular_eigen_vals_new[1])) + ggtitle("PCoA - Follicular") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# Menses
menses_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% menses_sample_IDs]))

# and now making a sample info table 
menses_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% menses_sample_IDs, ]

anova(betadisper(menses_euc_dist_new, menses_sample_info_tab_new$Cohort))
adonis(menses_euc_dist_new~menses_sample_info_tab_new$Cohort)


# making our phyloseq object with transformed table
menses_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% menses_sample_IDs], taxa_are_rows=T)
menses_sample_info_tab_phy_new <- sample_data(menses_sample_info_tab_new)
menses_vst_physeq_new <- phyloseq(menses_vst_count_phy_new, menses_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
menses_vst_pcoa_new <- ordinate(menses_vst_physeq_new, method="MDS", distance="euclidean")
menses_eigen_vals_new <- menses_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination with our adonis statistic
plot_ordination(menses_vst_physeq_new, menses_vst_pcoa_new, color="Cohort", shape= "Site") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cervix_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="PERMANOVA= 0.017") + 
  coord_fixed(sqrt(menses_eigen_vals_new[2]/menses_eigen_vals_new[1])) + ggtitle("PCoA - Menses") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

# Cesarean
cesarean_euc_dist_new <- dist(t(vst_trans_count_tab_new[ , colnames(vst_trans_count_tab_new) %in% cesarean_sample_IDs]))

# and now making a sample info table 
cesarean_sample_info_tab_new <- sample_info_tab_new[row.names(sample_info_tab_new) %in% cesarean_sample_IDs, ]

anova(betadisper(cesarean_euc_dist_new, cesarean_sample_info_tab_new$Cohort))
adonis(cesarean_euc_dist_new~cesarean_sample_info_tab_new$Cohort)


# making our phyloseq object with transformed table
cesarean_vst_count_phy_new <- otu_table(vst_trans_count_tab_new[, colnames(vst_trans_count_tab_new) %in% cesarean_sample_IDs], taxa_are_rows=T)
cesarean_sample_info_tab_phy_new <- sample_data(cesarean_sample_info_tab_new)
cesarean_vst_physeq_new <- phyloseq(cesarean_vst_count_phy_new, cesarean_sample_info_tab_phy_new)

# generating and visualizing the PCoA with phyloseq
cesarean_vst_pcoa_new <- ordinate(cesarean_vst_physeq_new, method="MDS", distance="euclidean")
cesarean_eigen_vals_new <- cesarean_vst_pcoa_new$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples

# and making our new ordination with our adonis statistic
plot_ordination(cesarean_vst_physeq_new, cesarean_vst_pcoa_new, color="Cohort", shape ="Site") + 
  labs(col="type") + geom_point(size=1) + 
  # geom_text(aes(label=rownames(cesarean_sample_info_tab), hjust=0.3, vjust=-0.4)) + 
  #annotate("text", x=25, y=68, label="All Cohorts") +
  annotate("text", x=25, y=62, label="PERMANOVA= 0.003") + 
  coord_fixed(sqrt(cesarean_eigen_vals_new[2]/cesarean_eigen_vals_new[1])) + ggtitle("PCoA - Cesarean") + 
  scale_color_brewer(palette = "Set1")
# scale_color_manual(values=unique(basalt_sample_info_tab$color[order(basalt_sample_info_tab$char)])) + 
# theme_bw() + theme(legend.position="none")

